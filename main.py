from aiogram import executor, Bot, Dispatcher, types

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

import time

from inline_kb import url_inst, question_answer, data_question_answer
from reply_kb import *
from sqlite import *
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# SAVE USERS
class ProfileStatesGroup(StatesGroup):
    name = State()
    phone_number = State()


async def on_startup(_):
    await bot.send_message(chat_id=5951238761, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.send_message(chat_id=1903059288, text="–ú–∞–ª –ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è!")
    await start_db()


@dp.message_handler(Text('–ü—Ä–µ—Ä–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—Éüö´'), state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫—É‚ùå',
                         reply_markup=get_main())


@dp.message_handler(commands=['start'])
async def cmd_pars(message: types.Message):
    await message.answer(text=start_text,
                         reply_markup=get_start())
    print(message)
    await message.delete()


@dp.message_handler(commands=['get_users'])
async def cmd_get_users(message: types.Message):
    try:
        await message.answer(text=get_users())
        await message.delete()
    except:
        await message.answer(text='–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤')

@dp.message_handler(Text('–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—åüìñ'))
async def cmd_conf(message: types.Message):
    await message.answer(text=conf_text,
                         reply_markup=get_back())


@dp.message_handler(Text('–ì–ª–∞–≤–Ω–∞—è'))
async def cmd_main_menu(message: types.Message):
    await message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                         reply_markup=get_main())


@dp.message_handler(Text(('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∂Ô∏è', '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùìü§î', 'Instagramüì∑')))
async def cmd_request(message: types.Message):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∂Ô∏è':
        await message.answer(text=send_request_text,
                             reply_markup=get_main())
    elif message.text == 'Instagramüì∑':
        await message.answer(text='–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É\n'
                                  '–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã!',
                             reply_markup=url_inst())
    elif message.text == '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùìü§î':
        await message.answer(text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:',
                             reply_markup=question_answer())
        await message.answer(text='–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º.‚ò∫Ô∏è‚úÖ')


# SEND INFO USER
@dp.message_handler(Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Åüì®'))
async def cmd_send_info(message: types.Message):
    if message.from_user.id in check_user():
        await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å\n–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞üïô')
    else:
        await message.reply(text="–î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫—É,\n–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—èüìû\n–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ–µ –∏–º—è?",
                            reply_markup=save_cancel())
        await ProfileStatesGroup.name.set()


# VALIDATOR NAME
@dp.message_handler(lambda message: not 15 > len(message.text), content_types='text', state=ProfileStatesGroup.name)
async def check_name(message: types.Message):
    await message.reply(text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')


# SAVE NAME
@dp.message_handler(state=ProfileStatesGroup.name)
async def save_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±\n'+
                              '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +996')
    await ProfileStatesGroup.next()


# VALIDATOR +996
@dp.message_handler(lambda message: not message.text.startswith('+996'), state=ProfileStatesGroup.phone_number)
async def check_number(message: types.Message):
    await message.reply(text='–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +996')


# VALIDATOR 13 number
@dp.message_handler(lambda message: not len(message.text) == 13, state=ProfileStatesGroup.phone_number)
async def check_number_len(message: types.Message):
    await message.reply(text='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é(13 —Å—Ç—Ä–æ–∫ )')


# SAVE PHONE NUMBER
@dp.message_handler(state=ProfileStatesGroup.phone_number)
async def save_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await state.finish()

    text_for_user = f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã!üì©\n–ò–º—è: {data['name']}\nüìû: {data['phone_number']}\n"
    await bot.send_message(chat_id=message.from_user.id, text=text_for_user,
                           reply_markup=get_main())

    # TIME NOW
    time_now = time.strftime('%Y/%m/%d %H:%M')
    # SAVE DATABASE
    await save_user(message.from_user.id, data['name'], data['phone_number'], time_now)

    text = f"–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['phone_number']}\nID: {message.from_user.id}"
    await bot.send_message(chat_id=5951238761, text=text)
    await bot.send_message(chat_id=1903059288, text=text)


@dp.callback_query_handler()
async def callback_answer(callback: types.CallbackQuery):
    for key, value in data_question_answer.items():
            if callback.data == f'question_{key}':
                await callback.message.answer(text=value['answer'])
                await callback.answer(text='')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

