import logging

from dispatcher import dp, bot

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, ChatTypeFilter, CommandStart
from aiogram.dispatcher.filters.state import StatesGroup, State

import datetime
import pytz

from handlers.client_handler.inline_kb import *
from keyboard.reply_kb import *
from db.psql import DB
from data import ADMIN
from text import start_text, send_request_text, conf_text

db = DB()


# SAVE USERS
class ProfileStatesGroup(StatesGroup):
    name = State()
    phone_number = State()


@dp.message_handler(Text('–ü—Ä–µ—Ä–≤–∞—Ç—åüö´'), state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in ADMIN:
        await message.answer(text='–í—ã –ø—Ä–µ–≤–≤–∞–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ‚ùå',
                             reply_markup=admin_table())
    else:
        await message.answer(text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫—É‚ùå',
                             reply_markup=get_main())


@dp.message_handler(CommandStart(), ChatTypeFilter(chat_type=types.ChatType.PRIVATE))
async def cmd_pars(message: types.Message):
    await message.delete()
    if message.from_user.id in ADMIN:
        await message.answer('–ê–¥–º–∏–Ω–∫–∞!', reply_markup=admin_table())
    else:
        if db.get_user(message.from_user.id) is None:
            db.save_user_id(message.from_user.id)
            await message.answer(text=start_text,
                                 reply_markup=get_start())
            logging.info(message.from_user.id)
        else:
            await message.answer(text=start_text,
                                 reply_markup=get_start())


@dp.message_handler(Text('–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—åüìñ'), ChatTypeFilter(chat_type=types.ChatType.PRIVATE))
async def cmd_conf(message: types.Message):
    await message.answer(text=conf_text, parse_mode='HTML',
                         reply_markup=get_back())


@dp.message_handler(Text('–ì–ª–∞–≤–Ω–∞—è'))
async def cmd_main_menu(message: types.Message):
    await message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                         reply_markup=get_main())


@dp.message_handler(Text(('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∂Ô∏è', '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùìü§î', 'Instagramüì∑')))
async def cmd_request(message: types.Message):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚ñ∂Ô∏è':
        await message.answer(text=send_request_text,
                             reply_markup=get_main())
    elif message.text == 'Instagramüì∑':
        await message.answer(text='–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É\n'
                                  '–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã!',
                             reply_markup=url_inst())
    elif message.text == '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã‚ùìü§î':
        await message.answer(text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', parse_mode='HTML',
                             reply_markup=question_answer())
        await message.answer(text='–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º.‚ò∫Ô∏è‚úÖ')


# SEND INFO USER
@dp.message_handler(Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Åüì®'))
async def cmd_send_info(message: types.Message):
    if db.check_request_user(message.from_user.id):
        await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å\n–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞üïô')
    else:
        await message.reply(text="–î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞—è–≤–∫—É,\n–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—èüìû\n–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—ë –∏–º—è?",
                            reply_markup=cancel_kb())
        await ProfileStatesGroup.name.set()


# VALIDATOR NAME
@dp.message_handler(lambda message: not 15 > len(message.text), content_types='text', state=ProfileStatesGroup.name)
async def check_name(message: types.Message):
    await message.reply(text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')


# SAVE NAME
@dp.message_handler(state=ProfileStatesGroup.name)
async def save_name(message: types.Message, state: FSMContext):
    if not message.text.isalpha():
        await message.reply(text='–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!')
    else:
        async with state.proxy() as data:
            data['name'] = message.text.capitalize()
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±\n'
                                  '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +996')
        await ProfileStatesGroup.next()


# VALIDATOR +996
@dp.message_handler(lambda message: not message.text.startswith('+996'), state=ProfileStatesGroup.phone_number)
async def check_number(message: types.Message):
    await message.reply(text='–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +996')


# VALIDATOR 13 number
@dp.message_handler(lambda message: not len(message.text) == 13, state=ProfileStatesGroup.phone_number)
async def check_number_len(message: types.Message):
    await message.reply(text='–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é! (13 —Å—Ç—Ä–æ–∫)')


# SAVE PHONE NUMBER
@dp.message_handler(state=ProfileStatesGroup.phone_number)
async def save_phone_number(message: types.Message, state: FSMContext):
    phone = message.text.replace('+', '')
    if phone.isdigit():
        async with state.proxy() as data:
            data['phone_number'] = message.text
            await state.finish()

        text_for_user = f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã!üì©\n–ò–º—è: {data['name']}\nüìû: {data['phone_number']}\n"
        await bot.send_message(chat_id=message.from_user.id, text=text_for_user,
                               reply_markup=get_main())

        # UTC TIME ZONE BISHKEK
        utc = datetime.datetime.now(tz=pytz.timezone('Asia/Bishkek'))
        time_now = utc.strftime('%Y/%m/%d - %H:%M')
        # SAVE DATABASE
        db.update_save_user(message.from_user.id, data['name'], data['phone_number'], time_now)
        # SEND INFO TO ADMIN
        text = f"–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['phone_number']}\n" \
               f"<b><u>LINK</u></b>: <a href='tg://user?id={message.from_user.id}'>–°—Å—ã–ª–∫–∞ {data['name']}</a>"
        [await bot.send_message(chat_id=admin, text=text) for admin in ADMIN]

    else:
        await message.reply('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —á–∏—Å–µ–ª!')


@dp.callback_query_handler(lambda callback: callback.data.startswith('question'))
async def callback_answer(callback: types.CallbackQuery):
    for key, value in data_question_answer.items():
        if callback.data == f'question_{key}':
            await callback.answer()
            await callback.message.answer(text=f"<b>{value['question']}</b>\n\n"
                                               f"{value['answer']}", parse_mode='HTML')